package co.haptik.test.chatstat.model;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
// KEEP INCLUDES END

/**
 * Entity mapped to table "MESSAGE".
 */
public class Message {

    private Long id;
    private String body;
    private String username;
    private Boolean favourite;
     @com.google.gson.annotations.SerializedName( "Name" )
    private String name;
     @com.google.gson.annotations.SerializedName( "message-time" )
    private java.util.Date messageTime;
     @com.google.gson.annotations.SerializedName( "image-url" )
    private String imageUrl;
    private Long timeStamp;

    // KEEP FIELDS - put your custom fields here
    private static final long DAY = 1000*60*60*24;
    // KEEP FIELDS END

    public Message() {
    }

    public Message(Long id) {
        this.id = id;
    }

    public Message(Long id, String body, String username, Boolean favourite, String name, java.util.Date messageTime, String imageUrl, Long timeStamp) {
        this.id = id;
        this.body = body;
        this.username = username;
        this.favourite = favourite;
        this.name = name;
        this.messageTime = messageTime;
        this.imageUrl = imageUrl;
        this.timeStamp = timeStamp;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getBody() {
        return body;
    }

    public void setBody(String body) {
        this.body = body;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public Boolean getFavourite() {
        return favourite;
    }

    public void setFavourite(Boolean favourite) {
        this.favourite = favourite;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public java.util.Date getMessageTime() {
        return messageTime;
    }

    public void setMessageTime(java.util.Date messageTime) {
        this.messageTime = messageTime;
    }

    public String getImageUrl() {
        return imageUrl;
    }

    public void setImageUrl(String imageUrl) {
        this.imageUrl = imageUrl;
    }

    public Long getTimeStamp() {
        return timeStamp;
    }

    public void setTimeStamp(Long timeStamp) {
        this.timeStamp = timeStamp;
    }

    // KEEP METHODS - put your custom methods here

    public static List<Message> sortMessages(List<Message> messages) {
        Collections.sort(messages, new Comparator<Message>() {
            @Override
            public int compare(Message lhs, Message rhs) {
                return (int) (lhs.getId() - rhs.getId());
            }
        });
        return messages;
    }

    public String getFormattedDateTime() {
        Date currentDate = new Date();
        if(getMessageTime() != null) {
            SimpleDateFormat sdf;// = new SimpleDateFormat("MMM dd");
            if(currentDate.getTime() - getMessageTime().getTime() > 1*DAY) {
                sdf = new SimpleDateFormat("MMM dd");
            } else {
                sdf = new SimpleDateFormat("HH:mm");
            }
            return sdf.format(getMessageTime());
        } else {
            return "";
        }
    }
    // KEEP METHODS END

}
